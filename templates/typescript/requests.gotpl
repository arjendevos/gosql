// Generated by gosql: DO NOT EDIT.
import { API_URL } from '@core/helpers/config';
import { query, Query } from "./query";

export function customFetch<T>(params: CustomFetchOptions<T>): Promise<Response<T>> {
  const queryParameters = params.query ? query(params.query) : "";
  return new Promise((resolve, reject) => {
    fetch(API_URL + params.path + queryParameters, {
      method: params.method ?? "GET",
      headers: {
        "Content-Type": "application/json",
        ...params.headers,
      },
      body: params.body ? JSON.stringify(params.body) : undefined,
      credentials: "include",
      cache: "default",
      next: {
        revalidate: 0,
      },
    })
      .then(async (response) => {
        return response.json().then((data) => {
          if ((data as Response<T>).ok) {
            return resolve(data);
          }

          throw (data as Response<T>).message;
        });
      })
      .catch((error) => {
        console.log("error", error);
        reject(typeof error === "string" ? error : "Something went wrong");
      });
  });
}

export interface Response<T> {
  payload?: T;
  error?: string;
  message?: string;
  ok: boolean;
  pagination?: Pagination;
}

export interface Pagination {
  has_next_page: boolean;
  has_prev_page: boolean;
  next_page_cursor: string | null;
  prev_page_cursor: string | null;
}
export interface CustomFetchOptions<T> {
  path: string;
  method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
  headers?: Record<string, string>;
  body?: any;
  query?: Query<T>;
}
