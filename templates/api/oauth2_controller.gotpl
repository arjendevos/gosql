package {{.PackageName}}

import (
    "net/http"
	"os"
    "strings"
    "errors"
	"database/sql"

	"github.com/gin-gonic/gin"
	"golang.org/x/oauth2"
	"github.com/dgrijalva/jwt-go"
	"golang.org/x/oauth2/google"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/boil"


    {{- range .Imports }}
    "{{ . }}"
    {{- end }}
)

type Oauth2Controller struct {
    *Client
}

func GetGoogleOauth2Config() *oauth2.Config {
	return &oauth2.Config{
		ClientID:     os.Getenv("GOOGLE_CLIENT_ID"),
		ClientSecret: os.Getenv("GOOGLE_CLIENT_SECRET"),
		RedirectURL:  os.Getenv("API_URL") + "/oauth2/google/callback",
		Scopes: []string{
			"openid",
			"profile",
			"email",
		},
		Endpoint: google.Endpoint,
	}
}

type GoogleTokenInfo struct {
	Iss string `json:"iss"`
	// userId
	Sub string `json:"sub"`
	Azp string `json:"azp"`
	// clientId
	Aud string `json:"aud"`
	Iat int64  `json:"iat"`
	// expired time
	Exp int64 `json:"exp"`

	Email         string `json:"email"`
	EmailVerified bool   `json:"email_verified"`
	AtHash        string `json:"at_hash"`
	Name          string `json:"name"`
	GivenName     string `json:"given_name"`
	FamilyName    string `json:"family_name"`
	Picture       string `json:"picture"`
	Local         string `json:"locale"`
	jwt.StandardClaims
}

func (c *Oauth2Controller) Google(ctx *gin.Context) {
    state := GenerateRandomToken()

    ctx.SetSameSite(http.SameSiteLaxMode)
	ctx.SetCookie("Oauth2State", state, 3600, "/", os.Getenv("API_DOMAIN"), false, true)

	ctx.Redirect(302, GetGoogleOauth2Config().AuthCodeURL(state))
}

func (c *Oauth2Controller) GoogleCallback(ctx *gin.Context) {
    state, stateExists := ctx.GetQuery("state") // replace to get query exists
    code, codeExists := ctx.GetQuery("code")

    redirectUri := os.Getenv("APP_URL")

    cookie, err := ctx.Cookie("Oauth2State")
    if err != nil {
        ctx.Redirect(302, redirectUri+"?error=invalid_state")
		return
    }

	if !stateExists || !codeExists || !strings.EqualFold(cookie, state) {
		ctx.Redirect(302, redirectUri+"?error=invalid_state")
		return
	}

	token, err := GetGoogleOauth2Config().Exchange(ctx, code)
	if err != nil {
		ctx.Redirect(302, redirectUri+"?error=invalid_request")
		return
	}

    parsedToken, _, err := new(jwt.Parser).ParseUnverified(token.Extra("id_token").(string), &GoogleTokenInfo{})
	userInfo, ok := parsedToken.Claims.(*GoogleTokenInfo)
	if !ok || err != nil {
		ctx.Redirect(302, redirectUri+"?error=invalid_request")
		return
	}

    existingUser, err := dm.{{ pluralize .UserTable.CamelName}}(
        dm.{{ .UserTable.CamelName}}Where.Email.EQ(userInfo.Email),
		{{- if and (isNotNilTable .OrganizationTable) (isNotNilTable .OrganizationUserTable) }}
			qm.Load(dm.{{ .UserTable.CamelName}}Rels.{{ pluralize .OrganizationUserTable.CamelName}}),
			qm.Load(dm.{{ .UserTable.CamelName}}Rels.{{ pluralize .OrganizationUserTable.CamelName}} + "." + dm.{{ .OrganizationUserTable.CamelName}}Rels.{{ .OrganizationTable.CamelName}}),
		{{- end }}
    ).One(c.ctx, c.db)
    if err != nil && !errors.Is(err, sql.ErrNoRows) {
        ctx.Redirect(302, redirectUri+"?error=generic_error")
		return
    }

    if existingUser != nil {
		// Login
		{{ $organizationTable := .OrganizationTable }}
		{{ $organizationUserTable := .OrganizationUserTable }}

		jwtPayload := &JWTPayload{
			{{- range $jwt := .JWTFields }}
				{{- if .IsFromUserTable }}
					{{ .CamelName }}: existingUser.{{ .NormalName }},
				{{- else if and (.IsFromOrganizationTable) (isNotNilTable $organizationTable) (isNotNilTable $organizationUserTable)}}
					{{ .CamelName }}: existingUser.R.{{ pluralize $organizationUserTable.CamelName}}[0].R.{{$organizationTable.CamelName}}.{{ .NormalName }},
				{{- else if and (.IsFromOrganizationUserTable) (isNotNilTable $organizationTable) (isNotNilTable $organizationUserTable) }}
					{{ .CamelName }}: existingUser.R.{{ pluralize $organizationUserTable.CamelName}}[0].{{ .NormalName }},
				{{- end}}
			{{- end }}
		}

		tokenString, err := GenerateJWT(jwtPayload)
		if err != nil {
			ctx.Redirect(302, redirectUri+"?error=invalid_request")
			return
		}

		ctx = SetAuthenticationCookie(ctx, tokenString)
	    ctx.Redirect(302, redirectUri+"?success=true&new_user=false")
        return
    }

    var account *dm.Account
	{{- if and (isNotNilTable .OrganizationTable) (isNotNilTable .OrganizationUserTable)}}
		var organization *dm.{{ .OrganizationTable.CamelName}}
		var userOrganization *dm.{{ .OrganizationUserTable.CamelName}}
	{{- end }}

	err = Transactor(c.db, func(tx *sql.Tx) error {
		account = &dm.Account{
			Email:             userInfo.Email,
			{{ if hasColumn .UserTable.Columns "name" }}
				Name:              userInfo.Name,
			{{ end }}
			{{ if hasColumn .UserTable.Columns "full_name" }}
				FullName:              userInfo.Name,
			{{ end }}
			{{ if hasColumn .UserTable.Columns "profile_picture_url" }}
				ProfilePictureURL: userInfo.Picture,
			{{ end }}
			{{ if hasColumn .UserTable.Columns "avatar_url" }}
				AvatarURL:              userInfo.Name,
			{{ end }}
			
		}
		err = account.Insert(ctx, tx, boil.Infer())
		if err != nil {
			return err
		}

		{{- if and (isNotNilTable .OrganizationTable) (isNotNilTable .OrganizationUserTable)}}
			organization = &dm.{{ .OrganizationTable.CamelName}}{
				{{- if hasColumn .OrganizationTable.Columns "workspace"	}}
					Workspace: GenerateRandomToken(),
				{{- end }}
				{{- if hasColumn .OrganizationTable.Columns "slug"	}}
					Slug: GenerateRandomToken(),
				{{- end }}
				{{- if hasColumn .OrganizationTable.Columns "public_name" }}
					PublicName: GenerateRandomToken(),
				{{- end }}
			}
			err = organization.Insert(ctx, tx, boil.Infer())
			if err != nil {
				return err
			}

			userOrganization = &dm.{{ .OrganizationUserTable.CamelName}}{
				AccountID:      account.ID,
				{{.OrganizationTable.CamelName}}ID: organization.ID,
				{{- if hasColumn .OrganizationUserTable.Columns "role"	}}
					Role:           "ADMIN",
				{{- end }}
				
				{{- if hasColumn .OrganizationUserTable.Columns "invite_status"	}}
					InviteStatus: "ACCEPTED",
				{{- end }}
			}
			err = userOrganization.Insert(ctx, tx, boil.Infer())
			if err != nil {
				return err
			}

			return nil
		{{- end }}
	})
	if err != nil {
		ctx.Redirect(302, redirectUri+"?error=invalid_request")
		return
	}

	{{ $organizationTable := .OrganizationTable }}
	{{ $organizationUserTable := .OrganizationUserTable }}

    jwtPayload := &JWTPayload{
        {{- range $jwt := .JWTFields }}
            {{- if .IsFromUserTable }}
                {{ .CamelName }}: account.{{ .NormalName }},
            {{- else if and (.IsFromOrganizationTable) (isNotNilTable $organizationTable) (isNotNilTable $organizationUserTable)}}
                {{ .CamelName }}: organization.{{ .NormalName }},
            {{- else if and (.IsFromOrganizationUserTable) (isNotNilTable $organizationTable) (isNotNilTable $organizationUserTable) }}
                {{ .CamelName }}: userOrganization.{{.NormalName}},
            {{- end}}
        {{- end }}
    }

	tokenString, err := GenerateJWT(jwtPayload)
	if err != nil {
		ctx.Redirect(302, redirectUri+"?success=true&new_user=false")
		return
	}

	ctx = SetAuthenticationCookie(ctx, tokenString)
	ctx.Redirect(302, redirectUri+"?success=true&new_user=true") //ssend cookie
}