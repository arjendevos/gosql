// Generated by gosql: DO NOT EDIT.
package {{ .PackageName}}

import (
    "database/sql"
    "os"
    "fmt"
    "time"

	"github.com/gin-gonic/gin"
    "github.com/gin-contrib/cors"
)

type ApiConfig struct {
    AllowOrigins []string
    AllowMethods []string
	AllowHeaders []string
	CustomRoutes func(router *gin.Engine) (*gin.Engine)
    ExtraAuthMiddleware func(g *gin.Context)
}

func RunApi(db *sql.DB, c *ApiConfig) {
    controllers := NewClient(db)
    defer db.Close()

    if os.Getenv("GIN_MODE") == "release" {
		gin.SetMode(gin.ReleaseMode)
	}

    router := gin.Default()

    router.Use(c.cors())
    {{- if hasAuthFields .AuthFields }}
        authGroup := router.Group("/auth")
        authGroup.POST("/signin", controllers.Auth.SignIn)
        authGroup.POST("/signup", controllers.Auth.SignUp)
        authGroup.Use(AuthMiddleware(c.ExtraAuthMiddleware)).POST("/signout", controllers.Auth.SignOut)
        authGroup.Use(AuthMiddleware(c.ExtraAuthMiddleware)).GET("/me", controllers.Auth.Me)
        {{- if .HasOrganization }}
        authGroup.Use(AuthMiddleware(c.ExtraAuthMiddleware)).POST("/switch", controllers.Auth.SwitchOrganization)
        {{- end}}

        {{ if hasOauth2 .Controllers}} 
            router.GET("/oauth2/google", controllers.Oauth2.Google)
            router.GET("/oauth2/google/callback", controllers.Oauth2.GoogleCallback)
        {{- end}}
    {{- end}}

    {{ range $controller := .Controllers }}
        {{ $newRoutes := sortRoutesFromUnprotectedToProtected .}}
        {{ firstToLower .CamelName }} := router.Group("/{{ .SnakeName }}"){{ if everyRouteIsProtected .ProtectedRoutes }}.Use(AuthMiddleware(c.ExtraAuthMiddleware)){{- end}}
        {{- range $route := $newRoutes }}
            {{ firstToLower  $controller.CamelName }}.{{- if everyRouteIsProtected  $controller.ProtectedRoutes }}{{- else if isProtected $controller.ProtectedRoutes .CapitalName }}Use(AuthMiddleware(c.ExtraAuthMiddleware)).{{- end}}{{.Method}}("{{.Path}}", controllers.{{  $controller.CamelName}}.{{.LowerName}})
        {{- end }}
    {{ end }}

    if c.CustomRoutes != nil {
        router = c.CustomRoutes(router)
    }

    port := os.Getenv("PORT")   
	if port == "" {
		port = "8080"
	}
    panic(router.Run(fmt.Sprintf("localhost:%s", port)))
}

func (c *ApiConfig) cors() gin.HandlerFunc {
		return cors.New(cors.Config{
			AllowMethods:     append(c.AllowMethods, []string{"GET", "POST", "PATCH", "DELETE", "OPTIONS"}...),
			AllowHeaders:     append(c.AllowHeaders, []string{"Origin", "Content-Length", "Content-Type", "Authorization", "Access-Control-Allow-Credentials", "cookie"}...),
			AllowOrigins:     c.AllowOrigins,
			MaxAge:           12 * time.Hour,
			AllowCredentials: true,
		})
}