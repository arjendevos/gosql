// Generated by gosql: DO NOT EDIT.
package {{ .PackageName }}

import (
	{{ if .HasAuth }}
	"os"
	"time"
	"errors"
	"database/sql"
	"net/http"

	"github.com/dgrijalva/jwt-go"
	{{- end }}

	"crypto/rand"
	"encoding/base64"

	"github.com/gin-gonic/gin"
	"gopkg.in/validator.v2"
	"github.com/volatiletech/null/v8"
)

type Pagination struct {
	HasNextPage bool `json:"has_next_page"`
	NextPageCursor *string `json:"next_page_cursor"`
	HasPrevPage bool `json:"has_prev_page"`
	PrevPageCursor *string `json:"prev_page_cursor"`
}

func ResponseWithPayload(payload interface{}, errCode, message interface{}, ok bool, pagination *Pagination) gin.H {
	response := gin.H{}

	if (payload != nil) {
		response["payload"] = payload
	}

	if (errCode != nil) {
		response["error"] = errCode
	}

	if (message != nil) {
		response["message"] = message
	}

	response["ok"] = ok

	if (pagination != nil) {
		response["pagination"] = pagination
	}

	return response
}

func BindAndValidateJSON(context *gin.Context, obj interface{}) error {
	if err := context.ShouldBindJSON(obj); err != nil {
		return err
	}

	return validateObject(obj)
}

func validateObject(obj interface{}) error {
	if err := validator.Validate(obj); err != nil {
		return err
	}

	return nil
}

{{ if .HasAuth}}
type JWTPayload struct {
    {{ range $jwt := .JWTFields }}
        {{ .CamelName }} {{ .GoType }} `json:"{{ .SnakeName }}"`
    {{- end }}
}

type JWTClaim struct {
    *JWTPayload
	jwt.StandardClaims
}

func GenerateJWT(jwtPayload *JWTPayload) (signedToken string, err error) {
	secretKey := []byte(os.Getenv("JWT_SECRET"))

	expirationTime := time.Now().Add(24 * 7 * time.Hour)
	claims := &JWTClaim{
		JWTPayload: jwtPayload,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: expirationTime.Unix(),
		},
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString(secretKey)
}

func ValidateToken(signedToken string) (*JWTClaim, error) {
	secretKey := []byte(os.Getenv("JWT_SECRET"))
	token, err := jwt.ParseWithClaims(
		signedToken,
		&JWTClaim{},
		func(token *jwt.Token) (interface{}, error) {
			return secretKey, nil
		},
	)
	if err != nil {
		return nil, err
	}
	claims, ok := token.Claims.(*JWTClaim)
	if !ok {
		return nil, errors.New("couldn't parse claims")
	}
	if claims.ExpiresAt < time.Now().Local().Unix() {
		return nil, errors.New("token expired")
	}

	return claims, nil
}
{{- end}}

func Transactor(db *sql.DB, txFunc func(*sql.Tx) error) (error) {
	tx, err := db.Begin()
	if err != nil {
		return err
	}
	defer tx.Rollback()

	err = txFunc(tx)
	if err != nil {
		return err
	}

	return tx.Commit()
}

func GenerateRandomToken() string {
	b := make([]byte, 16)
	_, _ = rand.Read(b)
	return base64.URLEncoding.EncodeToString(b)
}

func SetAuthenticationCookie(ctx *gin.Context, tokenString string) *gin.Context {
	ctx.SetSameSite(http.SameSiteLaxMode)
	ctx.SetCookie("Authorization", tokenString, 3600*24*7, "/", os.Getenv("COOKIE_DOMAIN"), false, true)
	return ctx
}

func SetAuthenticationCookieSignout(ctx *gin.Context) *gin.Context {
	ctx.SetSameSite(http.SameSiteLaxMode)
	ctx.SetCookie("Authorization", "", -1, "/", os.Getenv("COOKIE_DOMAIN"), false, true)
	return ctx
}

func toNullString(s string) null.String {
	return null.StringFrom(s)
}